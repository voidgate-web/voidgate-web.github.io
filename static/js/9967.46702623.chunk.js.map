{"version":3,"file":"static/js/9967.46702623.chunk.js","mappings":"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","sources":["webpack://voigate/./src/components/Video/style.module.scss?f9e4","components/Video/index.jsx","webpack://voigate/./src/layout/about/Presentation/style.module.scss?c2ec","layout/about/Presentation/index.jsx","ui/GradientBtn.jsx","ui/StyledModal.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__LJ3ff\",\"img\":\"style_img__16shn\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport LazyImage from '@components/LazyImage';\nimport GradientBtn from '@ui/GradientBtn';\nimport YouTube from 'react-youtube';\nimport StyledModal from '@ui/StyledModal';\n\n// utils\nimport PropTypes from 'prop-types';\n\n// hooks\nimport {useState} from 'react';\n\nconst Video = ({cover, id = '5_Blq9W9cT8'}) => {\n    const [modalOpen, setModalOpen] = useState(false);\n\n    return (\n        <div className={`${styles.container} video-container border-10`}>\n            <LazyImage className={styles.img} src={cover} alt=\"Video cover\" />\n            <GradientBtn className=\"btn--play\" tag=\"button\" onClick={() =>  setModalOpen(true)} aria-label=\"Play video\">\n                <i className=\"icon icon-play-solid\" />\n            </GradientBtn>\n            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)} classes={{root: 'video-container'}}>\n                <YouTube className=\"border-10\"\n                         videoId={id}\n                         opts={{playerVars: {autoplay: 1, mute: 1}}}\n                         onEnd={() => setModalOpen(false)} />\n            </StyledModal>\n        </div>\n    )\n}\n\nVideo.propTypes = {\n    cover: PropTypes.string.isRequired,\n    id: PropTypes.string\n}\n\nexport default Video","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__dOQhe\",\"main\":\"style_main__pPs0J\",\"main_text\":\"style_main_text__ZlNB+\",\"main_btn\":\"style_main_btn__VXidS\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport Video from '@components/Video';\nimport GradientBtn from '@ui/GradientBtn';\nimport Spring from '@components/Spring';\n\n// assets\nimport cover from '@assets/about/cover.webp';\n\nconst Presentation = () => {\n    return (\n        <section>\n            <div className={`${styles.container} container`}>\n                <Video cover={cover}/>\n                <Spring delay={350}>\n                    <div className={`${styles.main} border-hover`}>\n                        <h3>Our mission</h3>\n                        <p className={styles.main_text}>\n                            Enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n                            fugiat nulla pariatur.\n                        </p>\n                        <GradientBtn className={styles.main_btn} href=\"/blog-sidebar\">See our blog</GradientBtn>\n                    </div>\n                </Spring>\n            </div>\n        </section>\n    )\n}\n\nexport default Presentation","// components\nimport {animated, useSpring} from '@react-spring/web';\nimport {NavLink} from 'react-router-dom';\n\n// hooks\nimport {useState} from 'react';\n\n// utils\nimport classNames from 'classnames';\n\nconst Wrapper = ({tag, href, ...props}) => {\n    if (tag === 'button') {\n        return <animated.button {...props}/>\n    }\n\n    if (href === undefined || href === '#') {\n        return <animated.a {...props}/>\n    }\n\n    const AnimatedNavLink = animated(NavLink);\n    return <AnimatedNavLink to={href} {...props}/>\n}\n\nconst GradientBtn = ({className, ...props}) => {\n    const [isHovered, setIsHovered] = useState(false);\n\n    const variants = {\n        static: {background: 'linear-gradient(98.49deg, #05C9F9 -11.31%, #E5F61B 76.26%)'},\n        active: {background: 'linear-gradient(98.49deg, #E5F61B -11.31%, #05C9F9 76.26%)'},\n    };\n\n    const {background} = useSpring({\n        background: isHovered ? variants.active.background : variants.static.background,\n        config: {duration: 300},\n        ...props,\n    });\n\n    return (\n        <Wrapper className={classNames('btn btn--gradient', className)} {...props}\n                         onMouseEnter={() => setIsHovered(true)}\n                         onMouseLeave={() => setIsHovered(false)}\n                         style={{background, color: '#000000'}}>\n            {props.children}\n        </Wrapper>\n    )\n}\n\nexport default GradientBtn","// styling\nimport styled from 'styled-components/macro';\n\n// components\nimport Modal from '@mui/material/Modal';\nimport Grow from '@mui/material/Grow';\n\n// hooks\nimport {useEffect} from 'react';\nimport useScrollLock from '@hooks/useScrollLock';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst ModalWrapper = styled(Modal)`\n  padding: 20px;\n  height: 100vh;\n  overflow-y: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100000 !important;\n\n  .MuiBackdrop-root {\n    background: rgba(1, 1, 1, .6);\n  }\n\n  .content {\n    padding: 30px 20px;\n    position: relative;\n    flex: 1;\n    max-width: 1000px;\n    overflow: visible;\n    \n    .search-form {\n      margin: 10px 0;\n    }\n\n    .icon-close {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      font-size: 20px;\n      color: var(--divider);\n      transition: all var(--transition);\n      cursor: pointer;\n\n      &:hover {\n        color: var(--text-light);\n      }\n    }\n  }\n\n  &.video-container .content {\n    iframe {\n      aspect-ratio: 16 / 9;\n    }\n\n    .icon-close {\n      top: -10px;\n      right: -10px;\n      background: var(--accent);\n      width: 25px;\n      height: 25px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      border-radius: 50%;\n      font-size: 14px;\n      will-change: transform;\n\n      &:hover {\n        transform: scale(1.1);\n        color: var(--bg-primary);\n      }\n    }\n  }\n\n  @media screen and (min-width: 414px) {\n    .content {\n      padding: 40px 30px;\n\n      .icon {\n        top: 20px;\n        right: 20px;\n      }\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    .content {\n      padding: 50px 40px;\n    }\n  }\n`;\n\nconst StyledModal = ({children, ...props}) => {\n    const {lockScroll, unlockScroll} = useScrollLock();\n\n    useEffect(() => {\n        props.open ? lockScroll() : unlockScroll();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.open]);\n\n    return (\n        <ModalWrapper {...props} closeAfterTransition>\n            <Grow in={props.open} timeout={300}>\n                <div className=\"content bg-tertiary border-10\">\n                    <i className=\"icon icon-xmark icon-close\" onClick={props.onClose}/>\n                    {children}\n                </div>\n            </Grow>\n        </ModalWrapper>\n    );\n}\n\nStyledModal.propTypes = {\n    children: PropTypes.node.isRequired,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nexport default StyledModal"],"names":["_ref","cover","_ref$id","id","_useState","useState","_useState2","_slicedToArray","modalOpen","setModalOpen","_jsxs","className","concat","styles","children","_jsx","LazyImage","src","alt","GradientBtn","tag","onClick","StyledModal","open","onClose","classes","root","YouTube","videoId","opts","playerVars","autoplay","mute","onEnd","Video","Spring","delay","href","Wrapper","props","_objectWithoutProperties","_excluded","animated","_objectSpread","undefined","AnimatedNavLink","NavLink","to","_ref2","_excluded2","isHovered","setIsHovered","variants","background","useSpring","config","duration","classNames","onMouseEnter","onMouseLeave","style","color","ModalWrapper","styled","Modal","withConfig","componentId","_useScrollLock","useScrollLock","lockScroll","unlockScroll","useEffect","closeAfterTransition","Grow","in","timeout"],"sourceRoot":""}