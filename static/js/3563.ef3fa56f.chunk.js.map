{"version":3,"file":"static/js/3563.ef3fa56f.chunk.js","mappings":"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","sources":["webpack://xchain/./src/components/Features/style.module.scss?b694","components/Features/index.jsx","components/Spring.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"grid\":\"style_grid__l4Y+X\",\"grid_item\":\"style_grid_item__h0oAc\",\"content\":\"style_content__dKIIb\",\"icon\":\"style_icon__yCE+Q\",\"shield\":\"style_shield__wRVnJ\",\"headset\":\"style_headset__YkMbW\",\"trophy\":\"style_trophy__RDd8s\",\"rocket\":\"style_rocket__46PQa\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport Spring from '@components/Spring';\n\nconst Features = () => {\n    const data = [\n        {icon: 'shield', title: 'High security assets transfer'},\n        {icon: 'headset', title: '24/7 live support with Skype & Email'},\n        {icon: 'trophy', title: 'Top class NFT products'},\n        {icon: 'rocket', title: 'Regular training & seller courses'}\n    ];\n\n    return (\n        <div className=\"section\">\n            <div className=\"container\">\n                <div className={styles.grid}>\n                    {\n                        data.map((item, index) => (\n                            <Spring key={index} index={index}>\n                                <div className={`${styles.grid_item} border-hover bg-primary`}>\n                                    <div className={styles.content}>\n                                        <div\n                                            className={`${styles.icon} ${styles[item.icon]}`}>\n                                            <i className={`icon-${item.icon}`}/>\n                                        </div>\n                                        <div className=\"feature_content\">\n                                            <h5>{item.title}</h5>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Spring>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Features","// components\nimport {animated, useSpring} from '@react-spring/web';\n\n// hooks\nimport {useInView} from 'react-intersection-observer';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Spring = ({children, index = 1, className, type = 'slide', delay, ...props}) => {\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: true\n    });\n\n    const common = {\n        config: {duration: 300, mass: 1, tension: 300, friction: 30},\n        delay: props.delay ? props.delay : 100 * index,\n    }\n\n    const slide = useSpring({\n        from: {transform: 'translateY(40px)', opacity: 0},\n        to: {transform: inView ? 'translateY(0px)' : 'translateY(40px)', opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const fade = useSpring({\n        from: {opacity: 0},\n        to: {opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const grow = useSpring({\n        from: {transform: 'scale(0.4)'},\n        to: {transform: inView ? 'scale(1)' : 'scale(0.4)'},\n        ...common,\n        ...props\n    });\n\n    const spring = {\n        slide,\n        fade,\n        grow\n    }\n\n    return (\n        <animated.div className={className ? className : ''} style={spring[type]} ref={ref}>\n            {children}\n        </animated.div>\n    )\n}\n\nSpring.propTypes = {\n    children: PropTypes.node.isRequired,\n    index: PropTypes.number,\n    className: PropTypes.string,\n    type: PropTypes.oneOf(['slide', 'fade', 'grow']),\n    delay: PropTypes.number\n}\n\nexport default Spring","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_jsx","className","children","styles","icon","title","map","item","index","Spring","concat","_jsxs","_ref","_ref$index","_ref$type","type","props","delay","_objectWithoutProperties","_excluded","_useInView","useInView","threshold","triggerOnce","_useInView2","_slicedToArray","ref","inView","common","config","duration","mass","tension","friction","spring","slide","useSpring","_objectSpread","from","transform","opacity","to","fade","grow","animated","style","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","React","_state$entry","rootMargin","skip","initialInView","onChange","_React$useState","_React$useState2","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}