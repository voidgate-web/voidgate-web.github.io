{"version":3,"file":"static/js/7077.b195548b.chunk.js","mappings":"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","sources":["components/Spring.jsx","webpack://voigate/./src/layout/about/About/style.module.scss?8709","layout/about/About/index.jsx","pages/About.jsx","../node_modules/react-use/esm/useEffectOnce.js","../node_modules/react-use/esm/useUnmount.js","../node_modules/react-use/esm/useRafState.js","../node_modules/react-use/esm/misc/util.js","../node_modules/react-use/esm/useWindowSize.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// components\nimport {animated, useSpring} from '@react-spring/web';\n\n// hooks\nimport {useInView} from 'react-intersection-observer';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Spring = ({children, index = 1, className, type = 'slide', delay, ...props}) => {\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: true\n    });\n\n    const common = {\n        config: {duration: 300, mass: 1, tension: 300, friction: 30},\n        delay: props.delay ? props.delay : 100 * index,\n    }\n\n    const slide = useSpring({\n        from: {transform: 'translateY(40px)', opacity: 0},\n        to: {transform: inView ? 'translateY(0px)' : 'translateY(40px)', opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const fade = useSpring({\n        from: {opacity: 0},\n        to: {opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const grow = useSpring({\n        from: {transform: 'scale(0.4)'},\n        to: {transform: inView ? 'scale(1)' : 'scale(0.4)'},\n        ...common,\n        ...props\n    });\n\n    const spring = {\n        slide,\n        fade,\n        grow\n    }\n\n    return (\n        <animated.div className={className ? className : ''} style={spring[type]} ref={ref}>\n            {children}\n        </animated.div>\n    )\n}\n\nSpring.propTypes = {\n    children: PropTypes.node.isRequired,\n    index: PropTypes.number,\n    className: PropTypes.string,\n    type: PropTypes.oneOf(['slide', 'fade', 'grow']),\n    delay: PropTypes.number\n}\n\nexport default Spring","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__RekCo\",\"media\":\"style_media__pmslh\",\"media_img\":\"style_media_img__zCnvE\",\"media_wrapper\":\"style_media_wrapper__iDujb\",\"wave\":\"style_wave__pDJi1\",\"ring\":\"style_ring__hxtvR\",\"ball\":\"style_ball__RKFz3\",\"main\":\"style_main__Ui5kA\",\"wrapper\":\"style_wrapper__VJqCb\",\"main_img\":\"style_main_img__2zjip\",\"main_emoji\":\"style_main_emoji__WakHl\",\"main_text\":\"style_main_text__8vKrk\",\"main_divider\":\"style_main_divider__6h+WY\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport LazyImage from '@components/LazyImage';\nimport Spring from '@components/Spring';\n\n// hooks\nimport {useWindowSize} from 'react-use';\n\n// assets\nimport main from '@assets/about/about_main.webp';\nimport secondary from '@assets/about/about_secondary.webp';\nimport ball from '@assets/about/ball.webp';\nimport ring from '@assets/about/ring.webp';\nimport wave from '@assets/about/wave.webp';\n\nconst About = () => {\n    const {width} = useWindowSize();\n\n    return (\n        <section>\n            <div className={`${styles.container} container`}>\n                <div className={styles.media}>\n                    <LazyImage className={`${styles.media_img} border-10`} src={main} alt=\"media\"/>\n                    {\n                        width >= 1024 &&\n                        <div className={styles.media_wrapper}>\n                            <div>\n                                <LazyImage className={styles.wave} src={wave} alt=\"wave\" effect=\"opacity\"/>\n                            </div>\n                            <div>\n                                <LazyImage className={styles.ball} src={ball} alt=\"ball\" effect=\"opacity\"/>\n                            </div>\n                            <div>\n                                <LazyImage className={styles.ring} src={ring} alt=\"ring\" effect=\"opacity\"/>\n                            </div>\n                        </div>\n                    }\n                </div>\n                <div className={styles.main}>\n                    <LazyImage className={`${styles.main_img} border-10`} src={secondary} alt=\"media\"/>\n                    <Spring className={styles.wrapper} delay={300}>\n                        <span className={`${styles.main_emoji} h3`}>🔥🔥🔥</span>\n                        <h3>Who we are?</h3>\n                        <p className={styles.main_text}>\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\n                            labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n                            laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n                            voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                        </p>\n                        <span className={styles.main_divider}/>\n                    </Spring>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default About","// utils\nimport {lazy} from 'react';\n\n// components\nimport Title from '@components/Title';\nimport PageHeader from '@components/PageHeader';\nimport About from '@layout/about/About';\nconst Decoration = lazy(() => import('@layout/about/Decoration'));\nconst Features = lazy(() => import('@components/Features'));\nconst Presentation = lazy(() => import('@layout/about/Presentation'));\nconst Statistics = lazy(() => import('@layout/about/Statistics'));\nconst Team = lazy(() => import('@layout/about/Team'));\nconst CTA = lazy(() => import('@components/CTA'));\n\nconst AboutUs = () => {\n    return (\n        <>\n            <Title title=\"About Us\"/>\n            <PageHeader title=\"About Us\"/>\n            <main>\n                <About/>\n                <Decoration/>\n                <Features/>\n                <Presentation/>\n                <Statistics/>\n                <Team/>\n                <CTA/>\n            </main>\n        </>\n    );\n}\n\nexport default AboutUs","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","import { useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmount = function (fn) {\n    var fnRef = useRef(fn);\n    // update the ref each render so if it change the newest callback will be invoked\n    fnRef.current = fn;\n    useEffectOnce(function () { return function () { return fnRef.current(); }; });\n};\nexport default useUnmount;\n","import { useCallback, useRef, useState } from 'react';\nimport useUnmount from './useUnmount';\nvar useRafState = function (initialState) {\n    var frame = useRef(0);\n    var _a = useState(initialState), state = _a[0], setState = _a[1];\n    var setRafState = useCallback(function (value) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(function () {\n            setState(value);\n        });\n    }, []);\n    useUnmount(function () {\n        cancelAnimationFrame(frame.current);\n    });\n    return [state, setRafState];\n};\nexport default useRafState;\n","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import { useEffect } from 'react';\nimport useRafState from './useRafState';\nimport { isBrowser, off, on } from './misc/util';\nvar useWindowSize = function (initialWidth, initialHeight) {\n    if (initialWidth === void 0) { initialWidth = Infinity; }\n    if (initialHeight === void 0) { initialHeight = Infinity; }\n    var _a = useRafState({\n        width: isBrowser ? window.innerWidth : initialWidth,\n        height: isBrowser ? window.innerHeight : initialHeight,\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        if (isBrowser) {\n            var handler_1 = function () {\n                setState({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            };\n            on(window, 'resize', handler_1);\n            return function () {\n                off(window, 'resize', handler_1);\n            };\n        }\n    }, []);\n    return state;\n};\nexport default useWindowSize;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","children","_ref$index","index","className","_ref$type","type","props","delay","_objectWithoutProperties","_excluded","_useInView","useInView","threshold","triggerOnce","_useInView2","_slicedToArray","ref","inView","common","config","duration","mass","tension","friction","spring","slide","useSpring","_objectSpread","from","transform","opacity","to","fade","grow","_jsx","animated","style","width","useWindowSize","_jsxs","concat","styles","LazyImage","src","main","alt","wave","effect","ball","ring","secondary","Spring","Decoration","lazy","Features","Presentation","Statistics","Team","CTA","_Fragment","Title","title","PageHeader","About","useEffect","fn","fnRef","useRef","current","useEffectOnce","initialState","frame","_a","useState","state","setState","setRafState","useCallback","value","cancelAnimationFrame","requestAnimationFrame","useUnmount","isBrowser","window","initialWidth","initialHeight","Infinity","useRafState","innerWidth","height","innerHeight","handler_1","obj","args","_i","arguments","length","addEventListener","apply","on","removeEventListener","off","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","React","_state$entry","rootMargin","skip","initialInView","onChange","_React$useState","_React$useState2","setRef","_React$useState3","_React$useState4","entryTarget","previousEntryTarget","result"],"sourceRoot":""}