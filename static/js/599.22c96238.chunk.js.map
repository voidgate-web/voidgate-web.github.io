{"version":3,"file":"static/js/599.22c96238.chunk.js","mappings":"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","sources":["components/Spring.jsx","webpack://xchain/./src/layout/post/Comments/style.module.scss?9378","layout/post/Comments/index.jsx","ui/GradientBtn.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// components\nimport {animated, useSpring} from '@react-spring/web';\n\n// hooks\nimport {useInView} from 'react-intersection-observer';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Spring = ({children, index = 1, className, type = 'slide', delay, ...props}) => {\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: true\n    });\n\n    const common = {\n        config: {duration: 300, mass: 1, tension: 300, friction: 30},\n        delay: props.delay ? props.delay : 100 * index,\n    }\n\n    const slide = useSpring({\n        from: {transform: 'translateY(40px)', opacity: 0},\n        to: {transform: inView ? 'translateY(0px)' : 'translateY(40px)', opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const fade = useSpring({\n        from: {opacity: 0},\n        to: {opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const grow = useSpring({\n        from: {transform: 'scale(0.4)'},\n        to: {transform: inView ? 'scale(1)' : 'scale(0.4)'},\n        ...common,\n        ...props\n    });\n\n    const spring = {\n        slide,\n        fade,\n        grow\n    }\n\n    return (\n        <animated.div className={className ? className : ''} style={spring[type]} ref={ref}>\n            {children}\n        </animated.div>\n    )\n}\n\nSpring.propTypes = {\n    children: PropTypes.node.isRequired,\n    index: PropTypes.number,\n    className: PropTypes.string,\n    type: PropTypes.oneOf(['slide', 'fade', 'grow']),\n    delay: PropTypes.number\n}\n\nexport default Spring","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__n6WtL\",\"section\":\"style_section__Pc8qz\",\"comment\":\"style_comment__WaujU\",\"comment_wrapper\":\"style_comment_wrapper__ioz7I\",\"comment_media\":\"style_comment_media__fz-2C\",\"comment_main\":\"style_comment_main__V9xRn\",\"date\":\"style_date__-B6Ig\",\"divider\":\"style_divider__FjdHT\",\"reply\":\"style_reply__CYRRQ\",\"btn\":\"style_btn__C946O\",\"group\":\"style_group__WQT5k\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport GradientBtn from '@ui/GradientBtn';\nimport LazyImage from '@components/LazyImage';\nimport Spring from '@components/Spring';\n\n// hooks\nimport {useForm} from 'react-hook-form';\nimport {useState} from 'react';\n\n// utils\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\n// assets\nimport img1 from '@assets/home/sellers/10.webp';\nimport img2 from '@assets/avatar.webp';\nimport img3 from '@assets/home/sellers/2.webp';\n\nconst Comments = () => {\n    const [comments, setComments] = useState([\n        {\n            name: 'Barbara Ortiz',\n            avatar: img1,\n            date: new Date(2022, 4, 5, 8, 40),\n            message: `Convallis tellus id interdum velit laoreet id donec. Vitae elementum curabitur vitae nunc sed\n             velit dignissim sodales. Ultrices gravida dictum fusce ut placerat orci.`\n        },\n        {\n            name: 'Brenda Mitchell',\n            avatar: img2,\n            date: new Date(2022, 4, 6, 9, 2),\n            message: `Mauris pharetra et ultrices neque ornare aenean euismod elementum nisi.`,\n            isReply: true\n        }\n    ]);\n    const {register, handleSubmit, formState: {errors}, reset} = useForm();\n\n    const onSubmit = (data) => {\n        setComments([...comments, {\n            name: data.name,\n            avatar: img3,\n            date: dayjs(),\n            message: data.message\n        }]);\n        reset();\n    };\n\n    return (\n        <div className={`${styles.container} post-section`}>\n            <section className={styles.section}>\n                <h3>{comments.length} comment{comments.length !== 1 ? 's' : ''}</h3>\n                <div className=\"d-flex flex-column g-20\">\n                    {\n                        comments.map((comment, index) => (\n                            <Spring className={styles.comment_wrapper} key={index} index={index}>\n                                <div className={styles.comment} data-reply={comment.isReply}>\n                                    <div className={`${styles.comment_media} border-10 square`}>\n                                        <LazyImage src={comment.avatar} alt={comment.name}/>\n                                    </div>\n                                    <div className={styles.comment_main}>\n                                        <div className=\"d-flex flex-column g-5\">\n                                            <span className=\"text-bold text-light\">{comment.name}</span>\n                                            <div className=\"d-flex g-25 text-sm\">\n                                            <span className={`${styles.date} text-bold text-overflow`}>\n                                                {dayjs(comment.date).format('MMMM DD, YYYY [at] h:mm a')}\n                                            </span>\n                                                <span className={styles.divider}/>\n                                                <button className={`${styles.reply} text-bold`}>Reply</button>\n                                            </div>\n                                        </div>\n                                        <p className=\"text-sm\">\n                                            {comment.message}\n                                        </p>\n                                    </div>\n                                </div>\n                            </Spring>\n                        ))\n                    }\n                </div>\n            </section>\n            <section className={styles.section}>\n                <h3>Leave a comment</h3>\n                <form className=\"d-flex flex-column g-20\" onSubmit={handleSubmit(onSubmit)}>\n                    <div className={styles.group}>\n                        <input className={classNames('field field--outline', {'field--error': errors.name})}\n                               type=\"text\"\n                               placeholder=\"Full name\"\n                               {...register('name', {required: true})} />\n                        <input className={classNames('field field--outline', {'field--error': errors.email})}\n                               type=\"text\"\n                               placeholder=\"Email\"\n                               {...register('email', {required: true, pattern: /^\\S+@\\S+$/i})} />\n                    </div>\n                    <textarea className={classNames('field field--outline', {'field--error': errors.message})}\n                              placeholder=\"Enter your message\"\n                              {...register('message', {required: true})} />\n                    <GradientBtn className={styles.btn} tag=\"button\" type=\"submit\">Send comment</GradientBtn>\n                </form>\n            </section>\n        </div>\n    )\n}\n\nexport default Comments","// components\nimport {animated, useSpring} from '@react-spring/web';\nimport {NavLink} from 'react-router-dom';\n\n// hooks\nimport {useState} from 'react';\n\n// utils\nimport classNames from 'classnames';\n\nconst Wrapper = ({tag, href, ...props}) => {\n    if (tag === 'button') {\n        return <animated.button {...props}/>\n    }\n\n    if (href === undefined || href === '#') {\n        return <animated.a {...props}/>\n    }\n\n    const AnimatedNavLink = animated(NavLink);\n    return <AnimatedNavLink to={href} {...props}/>\n}\n\nconst GradientBtn = ({className, ...props}) => {\n    const [isHovered, setIsHovered] = useState(false);\n\n    const variants = {\n        static: {background: 'linear-gradient(98.49deg, #FCB808 -11.31%, #F9075E 76.26%)'},\n        active: {background: 'linear-gradient(98.49deg, #F9075E -11.31%, #FCB808 76.26%)'},\n    };\n\n    const {background} = useSpring({\n        background: isHovered ? variants.active.background : variants.static.background,\n        config: {duration: 300},\n        ...props,\n    });\n\n    return (\n        <Wrapper className={classNames('btn btn--gradient', className)} {...props}\n                         onMouseEnter={() => setIsHovered(true)}\n                         onMouseLeave={() => setIsHovered(false)}\n                         style={{background}}>\n            {props.children}\n        </Wrapper>\n    )\n}\n\nexport default GradientBtn","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","children","_ref$index","index","className","_ref$type","type","props","delay","_objectWithoutProperties","_excluded","_useInView","useInView","threshold","triggerOnce","_useInView2","_slicedToArray","ref","inView","common","config","duration","mass","tension","friction","spring","slide","useSpring","_objectSpread","from","transform","opacity","to","fade","grow","_jsx","animated","style","_useState","useState","name","avatar","img1","date","Date","message","img2","isReply","_useState2","comments","setComments","_useForm","useForm","register","handleSubmit","errors","formState","reset","_jsxs","concat","styles","length","map","comment","Spring","LazyImage","src","alt","dayjs","format","onSubmit","data","_toConsumableArray","img3","classNames","placeholder","required","email","pattern","GradientBtn","tag","Wrapper","href","undefined","AnimatedNavLink","NavLink","_ref2","_excluded2","isHovered","setIsHovered","variants","background","onMouseEnter","onMouseLeave","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","React","_state$entry","rootMargin","skip","initialInView","onChange","_React$useState","_React$useState2","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}