{"version":3,"file":"static/js/7750.a4abb5cd.chunk.js","mappings":"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","sources":["components/LazyImage.jsx","webpack://voigate/./src/components/SimplePageHeader/style.module.scss?5f3b","components/SimplePageHeader/index.jsx","components/Spring.jsx","components/Title.jsx","webpack://voigate/./src/layout/connect-wallet/style.module.scss?68b1","layout/connect-wallet/index.jsx","pages/ConnectWallet.jsx","ui/BreadcrumbsNav.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// components\r\nimport {LazyLoadImage} from 'react-lazy-load-image-component';\r\n\r\n// styles\r\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\n// utils\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LazyImage = ({src, alt, effect = 'blur', className, ...props}) => {\r\n    return (\r\n        <LazyLoadImage\r\n            src={src}\r\n            alt={alt}\r\n            effect={effect}\r\n            wrapperClassName={`${className || ''} lazy-image`}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n\r\nLazyImage.propTypes = {\r\n    src: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    effect: PropTypes.oneOf(['blur', 'opacity']),\r\n    className: PropTypes.string,\r\n}\r\n\r\nexport default LazyImage","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"style_header__rGwMj\",\"header_title\":\"style_header_title__btuqU\"};","// styling\r\nimport styles from './style.module.scss';\r\n\r\n// components\r\nimport Breadcrumbs from '@ui/BreadcrumbsNav';\r\n\r\nconst SimplePageHeader = ({title}) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <div className=\"container d-flex flex-column g-10\">\r\n                <h2 className={styles.header_title}>{title}</h2>\r\n                <Breadcrumbs/>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default SimplePageHeader","// components\r\nimport {animated, useSpring} from '@react-spring/web';\r\n\r\n// hooks\r\nimport {useInView} from 'react-intersection-observer';\r\n\r\n// utils\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Spring = ({children, index = 1, className, type = 'slide', delay, ...props}) => {\r\n    const [ref, inView] = useInView({\r\n        threshold: 0.2,\r\n        triggerOnce: true\r\n    });\r\n\r\n    const common = {\r\n        config: {duration: 300, mass: 1, tension: 300, friction: 30},\r\n        delay: props.delay ? props.delay : 100 * index,\r\n    }\r\n\r\n    const slide = useSpring({\r\n        from: {transform: 'translateY(40px)', opacity: 0},\r\n        to: {transform: inView ? 'translateY(0px)' : 'translateY(40px)', opacity: inView ? 1 : 0},\r\n        ...common,\r\n        ...props\r\n    });\r\n\r\n    const fade = useSpring({\r\n        from: {opacity: 0},\r\n        to: {opacity: inView ? 1 : 0},\r\n        ...common,\r\n        ...props\r\n    });\r\n\r\n    const grow = useSpring({\r\n        from: {transform: 'scale(0.4)'},\r\n        to: {transform: inView ? 'scale(1)' : 'scale(0.4)'},\r\n        ...common,\r\n        ...props\r\n    });\r\n\r\n    const spring = {\r\n        slide,\r\n        fade,\r\n        grow\r\n    }\r\n\r\n    return (\r\n        <animated.div className={className ? className : ''} style={spring[type]} ref={ref}>\r\n            {children}\r\n        </animated.div>\r\n    )\r\n}\r\n\r\nSpring.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    index: PropTypes.number,\r\n    className: PropTypes.string,\r\n    type: PropTypes.oneOf(['slide', 'fade', 'grow']),\r\n    delay: PropTypes.number\r\n}\r\n\r\nexport default Spring","// components\r\nimport {Helmet} from 'react-helmet';\r\n\r\nconst Title = ({title}) => {\r\n    return (\r\n        <Helmet>\r\n            <title> VoidGate </title>\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nexport default Title","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"style_wrapper__Py8Bm\",\"subtitle\":\"style_subtitle__q8tSy\",\"main\":\"style_main__vQ6sX\",\"main_item\":\"style_main_item__BFVtl\",\"img\":\"style_img__MhiZQ\",\"label\":\"style_label__+T53B\"};","// // styling\r\n// import styles from './style.module.scss';\r\n\r\n// // components\r\n// import LazyImage from '@components/LazyImage';\r\n// import Spring from '@components/Spring';\r\n\r\n// // utils\r\n// import classNames from 'classnames';\r\n\r\n// // assets\r\n// import metamask from '@assets/wallets/metamask.webp';\r\n// import coinbase from '@assets/wallets/coinbase.webp';\r\n// import glow from '@assets/wallets/glow.webp';\r\n// import phantom from '@assets/wallets/phantom.webp';\r\n// import walletConnect from '@assets/wallets/walletconnect.webp';\r\n// import bitski from '@assets/wallets/bitski.webp';\r\n\r\n// //wagmi\r\n\r\n// import { useState } from 'react';\r\n// import { useAccount, useConnect, useEnsName, useDisconnect\r\n// } from 'wagmi'\r\n// import { InjectedConnector } from 'wagmi/connectors/injected'\r\n\r\n\r\n\r\n// const Wallet = () => {\r\n//     const wallets = [\r\n//       {\r\n//         name: \"MetaMask\",\r\n//         image: metamask,\r\n//         tag: \"popular\",\r\n//       },\r\n//       // {\r\n//       //     name: 'Coinbase Wallet',\r\n//       //     image: coinbase,\r\n//       // },\r\n//       // {\r\n//       //     name: 'WalletConnect',\r\n//       //     image: walletConnect,\r\n//       // },\r\n//     ];\r\n  \r\n//     const { account, connect, disconnect, connectors, error, isLoading, pendingConnector } =\r\n//       useConnect();\r\n  \r\n//     return (\r\n//       <section className=\"mt-0\">\r\n//         <div className=\"container\">\r\n//           <div className={`${styles.wrapper} bg-secondary border-10`}>\r\n//             <div className=\"d-flex flex-column g-15\">\r\n//               <h3>You need an Ethereum wallet to use VoidGate</h3>\r\n//               <p className={`${styles.subtitle} h6`}>\r\n//                 Connect with one of our available wallet providers or create a new\r\n//                 one\r\n//               </p>\r\n//             </div>\r\n  \r\n//             {connectors.map((connector) => (\r\n//               <div\r\n//                 className={styles.main}\r\n//                 onClick={() => connect({ connector })}\r\n//                 key={connector.name}\r\n//               >\r\n//                 {wallets.map((wallet, index) => (\r\n//                   <Spring key={index} index={index}>\r\n//                     <div\r\n//                       className={`${styles.main_item} border-hover border-hover--horizontal`}\r\n//                       disabled={!connector.ready}\r\n//                     >\r\n//                       <LazyImage\r\n//                         className={styles.img}\r\n//                         src={wallet.image}\r\n//                         alt={wallet.name}\r\n//                       />\r\n  \r\n//                       <h5 className=\"main_item-title text-overflow\">\r\n//                         {connector.name}\r\n//                       </h5>\r\n//                       {wallet.tag && (\r\n//                         <span\r\n//                           className={classNames(`${styles.label} label-tag`, {\r\n//                             accent: wallet.tag === \"popular\",\r\n//                           })}\r\n//                         >\r\n//                           {wallet.tag}\r\n//                         </span>\r\n//                       )}\r\n//                     </div>\r\n//                   </Spring>\r\n//                 ))}\r\n//               </div>\r\n//             ))}\r\n             \r\n//               <button className=\"btn btn-primary mt-3\" onClick={() => disconnect()}>\r\n//                 Disconnect\r\n//               </button>\r\n          \r\n//           </div>\r\n//         </div>\r\n//       </section>\r\n//     );\r\n//   };\r\n  \r\n//   export default Wallet;\r\n  \r\n\r\n// styling\r\nimport styles from './style.module.scss';\r\n\r\n// components\r\nimport LazyImage from '@components/LazyImage';\r\nimport Spring from '@components/Spring';\r\n\r\n// utils\r\nimport classNames from 'classnames';\r\n\r\n// assets\r\nimport metamask from '@assets/wallets/metamask.webp';\r\nimport coinbase from '@assets/wallets/coinbase.webp';\r\nimport glow from '@assets/wallets/glow.webp';\r\nimport phantom from '@assets/wallets/phantom.webp';\r\nimport walletConnect from '@assets/wallets/walletconnect.webp';\r\nimport bitski from '@assets/wallets/bitski.webp';\r\n\r\n// wagmi\r\n\r\nimport { useState } from 'react';\r\nimport { useAccount, useConnect, useEnsName, useDisconnect } from 'wagmi'\r\nimport { InjectedConnector } from 'wagmi/connectors/injected'\r\n\r\nconst Wallet = () => {\r\n  const wallets = [\r\n    {\r\n      name: \"MetaMask\",\r\n      image: metamask,\r\n      tag: \"popular\",\r\n    },\r\n    // {\r\n    //     name: 'Coinbase Wallet',\r\n    //     image: coinbase,\r\n    // },\r\n    // {\r\n    //     name: 'WalletConnect',\r\n    //     image: walletConnect,\r\n    // },\r\n  ];\r\n\r\n  const { account, connect, connectors, error, isLoading, pendingConnector } =\r\n    useConnect();\r\n\r\n    const {disconnect} = useDisconnect();\r\n\r\n  const [isDisconnectOpen, setIsDisconnectOpen] = useState(false);\r\n\r\n  \r\n  return (\r\n    <section className=\"mt-0\">\r\n      <div className=\"container\">\r\n        <div className={`${styles.wrapper} bg-secondary border-10`}>\r\n          <div className=\"d-flex flex-column g-15\">\r\n            <h3>You need an Ethereum wallet to use VoidGate</h3>\r\n            <p className={`${styles.subtitle} h6`}>\r\n              Connect with one of our available wallet providers or create a new\r\n              one\r\n            </p>\r\n          </div>\r\n\r\n          {connectors.map((connector) => (\r\n            <div\r\n              className={styles.main}\r\n              onClick={() => connect({ connector })}\r\n              key={connector.name}\r\n            >\r\n              {wallets.map((wallet, index) => (\r\n                <Spring key={index} index={index}>\r\n                  <div\r\n                    className={`${styles.main_item} border-hover border-hover--horizontal`}\r\n                    disabled={!connector.ready}\r\n                  >\r\n                    <LazyImage\r\n                      className={styles.img}\r\n                      src={wallet.image}\r\n                      alt={wallet.name}\r\n                    />\r\n\r\n                    <h5 className=\"main_item-title text-overflow\">\r\n                      {connector.name}\r\n                    </h5>\r\n                    {wallet.tag && (\r\n                      <span\r\n                        className={classNames(`${styles.label} label-tag`, {\r\n                          accent: wallet.tag === \"popular\",\r\n                        })}\r\n                      >\r\n                        {wallet.tag}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </Spring>\r\n              ))}\r\n            </div>\r\n          ))}\r\n\r\n          {/* <div className=\"d-flex justify-content-end\">\r\n            <div className=\"dropdown\">\r\n              <button\r\n                className=\"btn btn-primary dropdown-toggle\"\r\n                type=\"button\"\r\n                id=\"disconnectDropdown\"\r\n                onClick={() => setIsDisconnectOpen(!isDisconnectOpen)}\r\n              >\r\n                Disconnect\r\n              </button>\r\n              {isDisconnectOpen && (\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"disconnectDropdown\">\r\n                  <li onClick={disconnect}>Disconnect</li>\r\n                </ul>\r\n              )}\r\n            </div>\r\n          </div> */}\r\n        </div>\r\n        </div>\r\n        </section>\r\n );\r\n   };\r\n   \r\n  export default Wallet;\r\n\r\n\r\n","// components\r\nimport Title from '@components/Title';\r\nimport SimplePageHeader from '@components/SimplePageHeader';\r\nimport Wallet from '@layout/connect-wallet';\r\n\r\nconst ConnectWallet = () => {\r\n    return (\r\n        <>\r\n            <Title title=\"Connect wallet\" />\r\n            <SimplePageHeader title=\"Connect wallet\" />\r\n            <main>\r\n                <Wallet />\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConnectWallet","// components\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n// hooks\r\nimport {useEffect, useState} from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\n\r\n// utils\r\nimport classNames from 'classnames';\r\n\r\nconst BreadcrumbsNav = () => {\r\n    const location = useLocation();\r\n    const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const path = location.pathname.split('/');\r\n        const pathArray = path.map((item, index) => {\r\n            return {\r\n                name: item === '' ? 'Home' : item.replace(/-/g, ' '),\r\n                path: item === '' ? '/' : path.slice(0, index + 1).join('/'),\r\n            }\r\n        });\r\n        setBreadcrumbs(pathArray);\r\n    }, [location]);\r\n\r\n    return (\r\n        <Breadcrumbs separator=\"•\" sx={{\r\n            color: 'var(--text)',\r\n            textTransform: 'capitalize',\r\n            '& .MuiBreadcrumbs-separator': {\r\n                color: 'var(--accent)',\r\n            }}}>\r\n            {\r\n                breadcrumbs.map((item, index) => (\r\n                    <NavLink className={classNames('text-bold link-hover', {\r\n                        'text-accent disabled': item.path === location.pathname,\r\n                        'text-uppercase': item.name === 'faq',\r\n                    })}\r\n                          key={item.path}\r\n                          to={item.path}>\r\n                        {item.name}\r\n                    </NavLink>\r\n                ))\r\n            }\r\n        </Breadcrumbs>\r\n    );\r\n}\r\n\r\nexport default BreadcrumbsNav","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","src","alt","_ref$effect","effect","className","props","_objectWithoutProperties","_excluded","_jsx","LazyLoadImage","_objectSpread","wrapperClassName","concat","title","styles","children","_jsxs","Breadcrumbs","_ref$index","index","_ref$type","type","delay","_useInView","useInView","threshold","triggerOnce","_useInView2","_slicedToArray","ref","inView","common","config","duration","mass","tension","friction","spring","slide","useSpring","from","transform","opacity","to","fade","grow","animated","style","Helmet","wallets","name","image","metamask","tag","_useConnect","useConnect","connect","account","connectors","_useState","error","isLoading","pendingConnector","useDisconnect","disconnect","useState","_useState2","map","connector","onClick","wallet","Spring","disabled","ready","LazyImage","classNames","accent","_Fragment","Title","SimplePageHeader","Wallet","location","useLocation","breadcrumbs","setBreadcrumbs","useEffect","path","pathname","split","pathArray","item","replace","slice","join","separator","sx","color","textTransform","NavLink","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","isPlainChildren","React","_state$entry","rootMargin","skip","initialInView","onChange","_React$useState","_React$useState2","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}